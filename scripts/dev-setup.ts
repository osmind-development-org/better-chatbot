import prompts from "prompts";
import * as fs from "node:fs";
import * as path from "node:path";
import { exec } from "node:child_process";
import { promisify } from "node:util";

const execPromise = promisify(exec);
const ROOT = process.cwd();
const ENV_PATH = path.join(ROOT, ".env");
const ENV_EXAMPLE_PATH = path.join(ROOT, ".env.example");

async function generateAuthSecret(): Promise<string> {
  console.log("üîê Generating auth secret...");
  const { stdout } = await execPromise(
    "npx --yes @better-auth/cli@latest secret",
  );
  const match = stdout.match(/BETTER_AUTH_SECRET=([a-f0-9]+)/);
  return match?.[1] || stdout.trim();
}

function buildEnvFile(cfg: Record<string, string>): string {
  const tpl = fs.existsSync(ENV_EXAMPLE_PATH)
    ? fs.readFileSync(ENV_EXAMPLE_PATH, "utf-8")
    : "";
  const lines = [
    "# Generated by interactive setup",
    "",
    `NODE_ENV=${cfg.NODE_ENV}`,
    "",
  ];

  if (tpl) {
    let skipUntilBlank = false;

    for (const line of tpl.split("\n")) {
      const trimmed = line.trim();

      // Skip storage sections not selected
      if (
        trimmed.includes("Vercel Blob example") &&
        cfg.FILE_STORAGE_TYPE !== "vercel-blob"
      )
        skipUntilBlank = true;
      if (trimmed.includes("S3 example") && cfg.FILE_STORAGE_TYPE !== "s3")
        skipUntilBlank = true;
      if (skipUntilBlank && !trimmed) {
        skipUntilBlank = false;
        lines.push(line);
        continue;
      }
      if (skipUntilBlank) continue;

      // Uncomment and set values from config
      const m =
        trimmed.match(/^([A-Z0-9_]+)=/) || trimmed.match(/^#\s*([A-Z0-9_]+)=/);
      if (m && cfg[m[1]]) {
        lines.push(`${m[1]}=${cfg[m[1]]}`);
        continue;
      }

      // Comment out placeholders
      if (trimmed.includes("****")) {
        lines.push(`# ${line.replace("****", "")}`);
        continue;
      }

      lines.push(line);
    }
  }
  return lines.join("\n");
}

async function main() {
  console.log("üöÄ Better Chatbot Dev Setup\n");

  // Check for existing custom .env
  if (fs.existsSync(ENV_PATH)) {
    const content = fs.readFileSync(ENV_PATH, "utf-8");
    const hasCustom = content
      .split("\n")
      .some(
        (l) =>
          l.includes("=") &&
          !l.startsWith("#") &&
          !l.includes("****") &&
          !l.includes("your_"),
      );
    if (hasCustom) {
      const { overwrite } = await prompts({
        type: "confirm",
        name: "overwrite",
        message: ".env exists with custom values. Overwrite?",
        initial: false,
      });
      if (!overwrite) {
        console.log("Cancelled.");
        return;
      }
      fs.copyFileSync(ENV_PATH, `${ENV_PATH}.backup.${Date.now()}`);
    }
  }

  const response: Record<string, string> = await prompts([
    {
      type: "text",
      name: "NODE_ENV",
      message: "Environment",
      initial: "development",
    },
    {
      type: "text",
      name: "POSTGRES_URL",
      message: "PostgreSQL URL",
      initial:
        "postgresql://postgres:postgres@localhost:5432/better_chatbot_dev",
    },
    {
      type: "text",
      name: "BETTER_AUTH_URL",
      message: "App URL",
      initial: "http://localhost:3000",
    },
    {
      type: "select",
      name: "BETTER_AUTH_TELEMETRY",
      message: "Auth Telemetry",
      choices: [
        { title: "Disabled", value: "0" },
        { title: "Enabled", value: "1" },
      ],
      initial: 0,
    },
    {
      type: "select",
      name: "DISABLE_EMAIL_SIGN_IN",
      message: "Email Sign In",
      choices: [
        { title: "Allow", value: "0" },
        { title: "Disable", value: "1" },
      ],
      initial: 1,
    },
    {
      type: "select",
      name: "DISABLE_SIGN_UP",
      message: "Sign Ups",
      choices: [
        { title: "Allow", value: "0" },
        { title: "Disable", value: "1" },
      ],
      initial: 0,
    },
  ]);

  response.BETTER_AUTH_SECRET = await generateAuthSecret();

  // LLM keys
  console.log("\nüìù LLM Keys (Enter to skip, need at least one):");
  const llmKeys = await prompts([
    { type: "password", name: "OPENAI_API_KEY", message: "OpenAI (sk-...)" },
    {
      type: "password",
      name: "ANTHROPIC_API_KEY",
      message: "Anthropic (sk-ant-...)",
    },
    {
      type: "password",
      name: "GOOGLE_GENERATIVE_AI_API_KEY",
      message: "Google",
    },
  ]);
  Object.assign(response, llmKeys);

  if (
    !llmKeys.OPENAI_API_KEY &&
    !llmKeys.ANTHROPIC_API_KEY &&
    !llmKeys.GOOGLE_GENERATIVE_AI_API_KEY
  ) {
    console.log("\n‚ö†Ô∏è  No LLM keys - add one to .env later!");
  }

  // OAuth
  console.log("\nüîê OAuth (optional):");
  const { enabled } = await prompts({
    type: "confirm",
    name: "enabled",
    message: "Configure Google OAuth?",
    initial: false,
  });
  if (enabled) {
    const oauth = await prompts([
      {
        type: "password",
        name: "GOOGLE_CLIENT_ID",
        message: "Google Client ID",
      },
      {
        type: "password",
        name: "GOOGLE_CLIENT_SECRET",
        message: "Google Client Secret",
      },
    ]);
    Object.assign(response, oauth);
  }

  // Storage
  console.log("\nüì¶ Storage:");
  const { type } = await prompts({
    type: "select",
    name: "type",
    message: "Storage type",
    choices: [
      { title: "Skip", value: "" },
      { title: "S3", value: "s3" },
      { title: "Local", value: "local" },
    ],
    initial: 0,
  });

  if (type === "s3") {
    response.FILE_STORAGE_TYPE = "s3";
    const s3 = await prompts([
      {
        type: "text",
        name: "FILE_STORAGE_S3_BUCKET",
        message: "Bucket",
        initial: "osmind-better-chat-dev",
      },
      {
        type: "text",
        name: "FILE_STORAGE_S3_REGION",
        message: "Region",
        initial: "us-west-2",
      },
      {
        type: "text",
        name: "FILE_STORAGE_PREFIX",
        message: "Prefix",
        initial: "uploads",
      },
      {
        type: "text",
        name: "AWS_PROFILE",
        message: "AWS Profile",
        initial: "osmind-prod",
      },
    ]);
    Object.assign(response, s3);
  } else if (type === "local") {
    response.FILE_STORAGE_TYPE = "local";
    response.FILE_STORAGE_PREFIX = "uploads";
  }

  fs.writeFileSync(ENV_PATH, buildEnvFile(response));
  console.log(
    "\n‚úÖ Created .env\nNext: make db-up && make db-migrate && make dev",
  );
}

main().catch(console.error);
